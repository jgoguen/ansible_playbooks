#!/usr/bin/env python3
# vim: set expandtab sw=4 ts=4 sts=4 foldmethod=indent filetype=python syntax=python:

import argparse
import asyncio
import json
import os
import subprocess

from collections import defaultdict


ipv4: defaultdict[str, list[str]] = defaultdict(list)
ipv6: defaultdict[str, list[str]] = defaultdict(list)


def parse_config(conf: str) -> dict[str, list[str]]:
    if not os.path.exists(conf):
        return {}

    with open(conf, 'r') as f:
        return json.load(f)


def args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-f", "--config", default="/etc/pf-table-updater.json",
        help="Path to config file",
    )

    return parser.parse_args()


async def _run_map_cmd(cmd: list[str]) -> defaultdict[str, list[str]]:
    proc = subprocess.run(
        cmd,
        check=True,
        capture_output=True,
    )
    output = proc.stdout.decode()
    mapping: defaultdict[str, list[str]] = defaultdict(list)

    for line in output.split("\n")[1:]:
        if "incomplete" in line:
            continue

        parts = line.split()
        if len(parts) < 2:
            continue

        mapping[parts[1]].append(parts[0])

    return mapping


async def load_ipv4_map() -> None:
    global ipv4
    ipv4 = await _run_map_cmd(['arp', '-an'])


async def load_ipv6_map() -> None:
    global ipv6
    ipv6 = await _run_map_cmd(['ndp', '-an'])


async def update_table(table: str, macs: list[str]) -> None:
    global ipv4
    global ipv6

    fname = f"/etc/pf.tables.d/{table}.txt"
    addresses = set()

    for mac in macs:
        addresses.update(ipv4[mac])
        addresses.update(ipv6[mac])

    addresses = {a for a in addresses if "%" not in a}

    with open(fname, 'w') as f:
        f.write("\n".join(addresses))

    proc = subprocess.run(
        ["doas", "/sbin/pfctl", "-nf", "/etc/pf.conf"],
        capture_output=True,
    )
    if proc.returncode != 0:
        print(proc.stderr.decode())
        return

    subprocess.run(
        ["doas", "/sbin/pfctl", "-t", table, "-T", "replace", "-f", fname],
        check=True,
        capture_output=True,
    )


async def main() -> int:
    opts = args()
    tables = parse_config(opts.config)

    await asyncio.gather(
        load_ipv4_map(),
        load_ipv6_map(),
    )

    aws = []
    for table in tables:
        aws.append(update_table(table, tables[table]))
    await asyncio.gather(*aws, return_exceptions=True)

    return 0


if __name__ == "__main__":
    asyncio.run(main())
