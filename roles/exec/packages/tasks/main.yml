---
# vim: set filetype=yaml.ansible expandtab sts=2 sw=2 nospell:

- name: Create user cargo directory
  file:
    path: '{{ ansible_local.user.homedir }}/.cargo'
    owner: '{{ user }}'
    group: '{{ ansible_local.root_owner.group }}'
    mode: 0755
    state: directory

- name: Ensuring minimal Cargo.toml
  community.general.ini_file:
    owner: '{{ user }}'
    group: '{{ ansible_local.root_owner.group }}'
    mode: 0644
    path: '{{ ansible_local.user.homedir }}/.cargo/config.toml'
    section: net
    option: 'git-fetch-with-cli'
    value: 'true'

- name: Enabling repo keys
  debug: var=repo_keys

- name: Install Fedora repo keys
  rpm_key:
    key: '{{ item }}'
    state: present
  loop: '{{ repo_keys }}'
  when: ansible_facts["distribution"] == "Fedora"
  check_mode: false

- name: Install Debian repo keys
  get_url:
    url: '{{ item.url }}'
    dest: '/etc/apt/trusted.gpg.d/{{ item.file }}'
    owner: root
    group: '{{ ansible_local.root_owner.group }}'
    mode: 0644
  loop: '{{ repo_keys }}'
  when: ansible_facts["distribution"] == "Debian"
  check_mode: false

- name: Enabling repos
  debug: var=repos

- name: Enable Fedora repositories
  yum_repository: '{{ item }}'
  loop: '{{ repos }}'
  when: ansible_facts["distribution"] == "Fedora"
  check_mode: false

- name: Enable Debian repositories
  apt_repository:
    repo: '{{ item.repo }}'
    filename: '{{ item.file }}'
    mode: 0644
  loop: '{{ repos }}'
  when: ansible_facts["distribution"] == "Debian"
  check_mode: false

# RPMFusion packages need to come from the upstream URL since they won't be
# accessible on initial install. But then the appstream packages can come from
# the installed repos.
- name: Install RPMFusion packages
  command:
    argv:
      - /usr/bin/dnf
      - install
      - '-y'
      - >-
        http://download1.rpmfusion.org/{{ item }}/fedora/rpmfusion-{{ item }}-release-
        {{ ansible_facts['lsb']['major_release'] }}.noarch.rpm
    creates: '/etc/yum.repos.d/rpmfusion-{{ item }}.repo'
  loop:
    - free
    - nonfree
  when: ansible_facts["distribution"] == "Fedora"

- name: Install RPMFusion appstream packages
  package:
    name:
      - rpmfusion-free-appstream-data
      - rpmfusion-nonfree-appstream-data
    state: present
  when: ansible_facts["distribution"] == "Fedora"

- name: Enabling COPRs
  debug: var=coprs

- name: 'Enable COPR {{ item.user }}/{{ item.name }}'
  command:
    argv:
      - /usr/bin/dnf
      - copr
      - enable
      - '-y'
      - '{{ item.user }}/{{ item.name }}'
    creates: '/etc/yum.repos.d/_copr:copr.fedorainfracloud.org:{{ item.user }}:{{ item.name }}.repo'
    warn: false
  when: ansible_facts["distribution"] != "Debian"
  loop: '{{ coprs }}'

- name: Fedora/CentOS needs dnf-plugins-core
  package:
    name: dnf-plugins-core
    state: installed
  when:
    - ansible_facts["system"] == "Linux"
    - ansible_facts["distribution"] != "Debian"
  check_mode: false

- name: Enabling remote repos
  debug: var=remote_repos

- name: Enabling Fedora remote repositories
  command: '/usr/bin/dnf config-manager --add-repo {{ item.url }}'
  args:
    creates: '/etc/yum.repos.d/{{ item.file }}'
  loop: '{{ remote_repos }}'
  when: ansible_facts["distribution"] == "Fedora"
  check_mode: false

- name: Enabling Debian remote repositories
  get_url:
    url: '{{ item.url }}'
    dest: '/etc/apt/sources.list.d/{{ item.file }}'
    owner: root
    group: '{{ ansible_local.root_owner.group }}'
    mode: 0644
  notify:
    - update apt cache
  loop: '{{ remote_repos }}'
  when: ansible_facts["distribution"] == "Debian"
  check_mode: false

# This is a really big hammer, but it's the only way to make sure the remote
# Debian repos are in the cache before we look for packages
- name: Flush handlers
  meta: flush_handlers
  check_mode: false

- name: Installing packages
  debug: var=packages.install

- name: Install packages
  package:
    name: '{{ packages.install }}'
    state: present
  when: ansible_facts["system"] != "Darwin"
  check_mode: false

- name: Install packages via Homebrew
  homebrew:
    name: '{{ packages.install }}'
    state: present
  become: true
  become_user: '{{ user }}'
  when: ansible_facts["system"] == "Darwin"

- name: Installing Snap packages
  debug: var=packages.snap

- name: Stat /var/lib/snapd/snap
  stat:
    path: /var/lib/snapd/snap
  register: snap_path

- name: Create Snap classic confinement symlink
  file:
    src: /var/lib/snapd/snap
    dest: /snap
    owner: root
    group: '{{ ansible_local.root_owner.group }}'
    state: link
  when:
    - ansible_facts["system"] == "Linux"
    - snap_path.stat.exists

- name: Install Snap packages
  snap:
    name: '{{ item.name }}'
    channel: '{{ item.channel }}'
    classic: '{{ item.classic }}'
    state: present
  when: ansible_facts["system"] == "Linux"
  loop: '{{ packages["snap"] }}'

- name: Installing Flatpak packages
  debug: var=packages.flatpak

- name: Installing Flathub remote
  community.general.flatpak_remote:
    flatpakrepo_url: 'https://flathub.org/repo/flathub.flatpakrepo'
    name: flathub
  when: ansible_facts["system"] == "Linux"

- name: Install Flatpak packages
  community.general.flatpak:
    name: '{{ item }}'
  when: ansible_facts["system"] == "Linux"
  loop: '{{ packages["flatpak"] }}'

- name: Removing packages
  debug: var=packages.remove

- name: Remove packages
  package:
    name: '{{ packages.remove }}'
    state: absent
  when: ansible_facts["system"] != "Darwin"

- name: Remove packages via Homebrew
  homebrew:
    name: '{{ packages.remove }}'
    state: absent
  become: true
  become_user: '{{ user }}'
  when: ansible_facts["system"] == "Darwin"

- name: Installing PIP packages
  debug: var=packages.pip

- name: PIP packages
  pip:
    executable: '{{ lookup("first_found", locations) }}'
    name: '{{ item }}'
  become: true
  become_user: '{{ user }}'
  vars:
    locations:
      - /usr/local/bin/pip3
      - /usr/local/bin/pip3.9
      - /usr/local/bin/pip3.8
      - /usr/bin/pip3
      - /usr/bin/pip3.9
      - /usr/bin/pip3.8
  loop: '{{ packages["pip"] }}'
  when: ansible_facts["distribution"] != "CentOS"

- name: Installing cargo packages
  debug: var=packages.cargo

- name: Cargo packages
  community.general.cargo:
    name: '{{ item }}'
  become: true
  become_user: '{{ user }}'
  loop: '{{ packages["cargo"] }}'

- name: Installing NPM packages
  debug: var=packages.npm

- name: NPM packages
  community.general.npm:
    name: '{{ item }}'
    global: true
  loop: '{{ packages["npm"] }}'

- name: Install macOS pkg installers
  include_tasks: macos_pkg.yml
  loop: '{{ macos_pkg_urls }}'
  when:
    - ansible_facts["system"] == "Darwin"
    - roles["desktop"]
