// Autoconfig file for Firefox installs
// vim: syntax=javascript:ts=2:sts=2:sw=2:noexpandtab:autoindent
// {{ ansible_managed }}

var config = {
	"preferences": {
		"app.shield.optoutstudies.enabled": {
			"value": "true",
		},
		"browser.contentblocking.enabled": {
			"value": "true",
			"locked": "true",
		},
		"browser.crashReports.unsubmittedCheck.autoSubmit2": {
			"value": "false",
			"locked": "true",
		},
		"browser.newtabpage.activity-stream.filterAdult": {
			"value": "false",
		},
		"browser.newtabpage.activity-stream.prerender": {
			"value": "false",
			"locked": "true",
		},
		"browser.newtabpage.activity-stream.showSponsored": {
			"value": "false",
			"locked": "true",
		},
		"browser.startup.homepage": {
			"value": "about:blank",
		},
		"browser.startup.page": {
			"value": "3",
		},
		"datareporting.healthreport.uploadEnabled": {
			"value": "false",
			"locked": "true",
		},
		"extensions.screenshots.upload-disabled": {
			"value": "true",
		},
		"extensions.update.autoUpdateDefault": {
			"value": "true",
			"locked": "true",
		},
		"extensions.update.enabled": {
			"value": "true",
			"locked": "true",
		},
		"extensions.update.interval": {
			"value": "1800",
			"locked": "true",
		},
		"network.proxy.type": {
			"value": "5",
		},
		"plugins.click_to_play": {
			"value": "true",
			"locked": "true",
		},
		"network.cookie.cookieBehavior": {
			"value": "3",
		},
		"network.trr.allow-rfc1918": {
			"value": "true",
		},
		"network.trr.bootstrapAddress": {
			"value": "8.8.8.8",
			"locked": "true",
		},
		"network.trr.early-AAAA": {
			"value": "true",
			"locked": "true",
		},
		"network.trr.excluded-domains": {
			"value": "dns.google,dns.google.com",
			"locked": "true",
		},
		"privacy.donottrackheader.enabled": {
			"value": "true",
			"locked": "true",
		},
		"privacy.resistFingerprinting": {
			"value": "false",
			"locked": "false",
		},
		"privacy.trackingprotection.annotate_channels": {
			"value": "true",
			"locked": "true",
		},
		"privacy.trackingprotection.lower_network_priority": {
			"value": "true",
			"locked": "true",
		},
	},
};

// Set preferences.
if ("preferences" in config) {
	for (key in config.preferences) {
		preference = config.preferences[key];
		var value = preference.value;

		if (value.toLowerCase() === "true" || value.toLowerCase() === "false") {
			value = value.match(/^true$/i) !== null;
		} else if (value.match(/^\d+$/)) {
			value = parseInt(value);
		}

		if ("default" in preference && preference.default) {
			defaultPref(key, value);
		}

		if ("locked" in preference && preference.locked) {
			lockPref(key, value);
		}
		else if (!("default" in preference) || !preference.default) {
			if (getPref(key) !== null) {
				unlockPref(key);
			}
			pref(key, value);
		}

		if ("clear" in preference && preference.clear) {
			clearPref(key);
		}
	}
}

var certDB = Components.classes["@mozilla.org/security/x509certdb;1"]
	.getService(Components.interfaces.nsIX509CertDB);
var certDB2;
try {
	certDB2 = Components.classes["@mozilla.org/security/x509certdb;1"]
		.getService(Components.interfaces.nsIX509CertDB2);
} catch (e) {
	certDB2 = Components.classes["@mozilla.org/security/x509certdb;1"]
		.getService(Components.interfaces.nsIX509CertDB);
}

// PEM certificates specified in the config above or read from files on
// disk will have the mandatory BEGIN/END CERTIFICATE lines, and will likely
// be multi-line and may have indentation, but the Mozilla APIs want only the
// Base64 content all on one line. This strips off the BEGIN/END CERTIFICATE
// chunks, merges all lines, and makes sure there's no whitespace left over.
function fixupCert(cert) {
	var beginCert = "-----BEGIN CERTIFICATE-----";
	var endCert = "-----END CERTIFICATE-----";

	cert = cert.replace(/[\r\n]/g, "");
	var begin = cert.indexOf(beginCert);
	var end = cert.indexOf(endCert);
	return cert.substring(begin + beginCert.length, end).replace(/\s/g, "");
}

// This reports an error string to the Browser Console (not the JS Console).
// It's only useful if Firefox will actually start, if there's an error reading
// the AutoConfig script Firefox will completely fail to start; in that event
// see http://web.mit.edu/~firefox/www/maintainers/autoconfig.html for
// environment variables to set to make AutoConfig debugging easier.
function certError(e) {
	var stack = e.stack || Error().stack;
	Components.utils.reportError(
		"AutoConfig Cert Error: " + e + "\n\n" + stack);
}

function addCertToDB(cert, trust) {
	if (cert.startsWith("-----BEGIN CERTIFICATE-----")) {
		// PEM certificate. It's assumed there's only one in each file being read.
		certDB2.addCertFromBase64(fixupCert(cert), trust);
	} else {
		// Binary/DER certificate. Again, only one certificate per file is assumed.
		certDB.addCert(cert, trust);
	}
}

// Import certificates.
if ("certs" in config) {
	var certDir = Components.classes["@mozilla.org/file/directory_service;1"]
		.getService(Components.interfaces.nsIProperties)
		.get("GreD", Components.interfaces.nsIFile);
	certDir.append("custom-resources");
	certDir.append("certs");

	// Install CA certificates
	if ("ca" in config.certs) {
		for (var cacert of config.certs.ca) {
			var certTrust = "trust" in cacert ? cacert.trust : ",,";

			try {
				if (cacert.cert.startsWith("-----BEGIN CERTIFICATE-----")) {
					cert = cacert.cert;
				}
				else {
					var certFile = certDir.clone();
					certFile.append(cacert.cert);

					var ios = Components.classes["@mozilla.org/network/file-input-stream;1"]
						.createInstance(Components.interfaces.nsIFileInputStream);
					ios.init(certFile, 1, 0, 0);
					var bio = Components.classes["@mozilla.org/binaryinputstream;1"]
						.createInstance(Components.interfaces.nsIBinaryInputStream);
					bio.setInputStream(ios);
					var byteArray = bio.readByteArray(ios.available());
					bio.close();
					ios.close();

					var cert = byteArray.map(function (elem) {
						return String.fromCharCode(elem);
					}).join("");
				}

				addCertToDB(cert, certTrust);
			} catch (e) {
				certError(e);
			}
		}
	}
}
