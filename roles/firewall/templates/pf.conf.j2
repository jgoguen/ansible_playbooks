# {{ ansible_managed }}

if_lan = "{{ pf['lan_interface'] }}"
{% for var in pf['variables'] %}
{% if pf['variables'][var] != "" %}
{{ var }} = "{{ pf['variables'][var] }}"
{% endif %}
{% endfor %}

table <martians> const { \
	0.0.0.0/8 10.0.0.0/8 127.0.0.0/8 169.254.0.0/16 172.16.0.0/12 192.0.0.0/24 \
	192.0.2.0/24 192.88.99.0/24 192.168.0.0/16 198.18.0.0/15 198.51.100.0/24 \
	203.0.113.0/24 224.0.0.0/3 \
	::/128 ::/96 ::1/128 ::ffff:0:0/96 100::/64 2001:10::/28 2001:2::/48 \
	2001:db8::/32 3ffe::/16 fec0::/10 fc00::/7 \
}
table <dns> const { {{ ((dns_servers | map("format_map", "{0}/32") | list) + (rad_config["dns"] | map("format_map", "{0}/128") | list)) | join(" ") }} }
table <ntp> const { {{ (ntp_servers | resolve_all_hosts | map("format_map", "{0}") | list) | join(" ") }} }
table <pfbadhost> persist file "/etc/pf-badhost.txt"

{% for table in pf['tables'] %}
table <{{ table }}> {% if pf['tables'][table]['const'] %}const {% endif %}{%if pf['tables'][table]['persist'] %}persist {% endif %}{% if pf['tables'][table]['file'] != "" %} file "{{ pf['tables'][table]['file'] }}"{% else %}{ {{ pf['tables'][table]['entries'] | join(" ") }} }{% endif %}

{% endfor %}

set block-policy return
set skip on lo
set reassemble yes no-df
set loginterface egress

match in all scrub (no-df random-id reassemble tcp)
{% if pf['nat'] %}match out on egress inet from !(egress:network) to any nat-to (egress:0) static-port{% endif %}

# Port build user does not need network
block drop out log quick proto {tcp udp} user _pbuild

{% if not pf['martians'] %}
# Block non-routable addresses on egress
block drop in quick on egress from <martians> to any
block drop out quick on egress from any to <martians>
{% endif %}

block in log quick on egress from <pfbadhost>
block out log quick on egress to <pfbadhost>

# Control inbound traffic, permit outbound by default
block return all
pass out modulate state

# Allow DHCP and DHCPv6
pass in on egress inet proto udp from port bootps to port bootpc
pass in on egress inet6 proto udp from fe80::/10 port dhcpv6-server to fe80::/10 port dhcpv6-client no state

# Allow ICMP
pass in on egress inet proto icmp to (egress)
pass in on egress inet6 proto icmp6 to { (egress) ff02::1/16 fe80::/10 }

{% if pf['nat'] %}
# When doing NAT, we also need to allow DHCP and ICMP on the LAN side
pass in on !egress inet proto icmp
pass in on !egress inet6 proto icmp6
pass in on !egress inet proto udp from port bootpc to port bootps
{% endif %}

pass in on $if_lan proto tcp from ($if_lan:network) to ($if_lan) port 22 modulate state

{% for ancr in pf['anchors'] %}
anchor "{{ ancr }}"
{% if pf['anchors'][ancr] != '' %}
load anchor "{{ ancr }}" from "{{ pf['anchors'][ancr] }}"
{% endif %}
{% endfor %}
